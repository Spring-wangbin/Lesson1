1.Spring是分层的Java SE/EE full-stack轻量级开源框架，以IOC、AOP为内核，取代了EJB低效的开发模式。
    分为三层：表现层（web）、业务逻辑层（service）、持久层（dao）

2.Spring的IOC设计思想
    Spring提供了两种IOC容器：BeanFactory和ApplicationContext,其中ApplicationContext是BeanFactory的子接口。
    两者都是通过xml配置文件加载Bean的
    两者的区别：
        Bean的某一个属性没有注入，使用BeanFactory加载后，第一次调用getBean()方法时会抛出异常，ApplicationContext会在初始化时自检。
        实际开发中，常用ApplicationContext

3.依赖注入：
    依赖注入（Dependency Injection，DI）和控制反转含义相同，它们是从两个角度描述的同一个概念。
    依赖注入的两种方式：
        属性setter注入：
            IOC容器使用setter方法注入被依赖的实例。
            通过调用无参构造器或无参static工厂方法实例化bean后，调用该bean的setter方法
        构造注入：
            IOC容器通过构造方法注入被依赖的实例，通过带参数的构造方法实现，每个参数代表一个依赖

4.bean的实例化：
    构造器实例化：
        <bean id="person1" class="com.mengma.instance.constructor.Person1" />
    静态工厂方式实例化：
        public class MyBeanFactory {
            // 创建Bean实例的静态工厂方法
            public static Person2 createBean() {
                return new Person2();
            }
        }
        <bean id="person2" class="com.mengma.instance.static_factory.MyBeanFactory"
                factory-method="createBean" />
    实例工厂方式实例化：
        public class MyBeanFactory {
            public MyBeanFactory() {
                System.out.println("person3工厂实例化中");
            }
            // 创建Bean的方法
            public Person3 createBean() {
                return new Person3();
            }
        }
        <!-- 配置实例工厂 -->
        <bean id="myBeanFactory" class="com.mengma.instance.factory.MyBeanFactory" />
        <!-- factory-bean属性指定一个实例工厂，factory-method属性确定使用工厂中的哪个方法 -->
        <bean id="person3" factory-bean="myBeanFactory" factory-method="createBean" />

5.bean的作用域：
    singleton：单例模式，在容器中只有一个实例，是Bean的默认作用域。
    prototype：原型模式，每次通过spring容器获取bean时，容器都会创建一个新的Bean实例
    request：一次Http请求中，容器返回同一个实例。对不同的Http请求，返回不同的实例。作用域只对当前Http Request内有效
    session：在一次 HTTP Session 中，容器会返回该 Bean 的同一个实例。而对不同的 HTTP 请求，会返回不同的实例，该作用域仅在当前 HTTP Session 内有效
    global Session：在一个全局的 HTTP Session 中，容器会返回该 Bean 的同一个实例。该作用域仅在使用 portlet context 时有效
    singleton\prototype两种作用域最常用

6.Bean的装配方式：
    基于XML装配Bean：
        <!-- 使用设值注入方式装配Person实例 -->
        <bean id="person1" class="com.mengma.assembly.Person">
            <property name="name" value="zhangsan" />
            <property name="age" value="20" />
        </bean>
        <!-- 使用构造方法装配Person实例 -->
        <bean id="person2" class="com.mengma.assembly.Person">
            <constructor-arg index="0" value="lisi" />
            <constructor-arg index="1" value="21" />
        </bean>
    基于注解Annotation装配：
        @Component：类注解，泛化的概念，j仅仅表示一个组件（bean）
        @Repository：用于将数据访问层（DAO层）的类标识为bean，功能与@Component相同
        @Service：作用在业务层（Service层），功能与@Component相同
        @Controller：作用在控制层，功能与@Component相同
        @Autowired：对Bean的属性变量、属性的Set方法及构造函数进行标注，配合对应的注解处理器完成Bean的自动配置工作。默认按照Bean的类型进行装配
        @Resource：作用与Autowired一样。区别：Resource默认按照Bean的名称进行装配
            @Resource 中有两个重要属性：name 和 type。
            Spring 将 name 属性解析为 Bean 实例名称，type 属性解析为 Bean 实例类型。如果指定 name 属性，则按实例名称进行装配；如果指定 type 属性，则按 Bean 类型进行装配。
            如果都不指定，则先按 Bean 实例名称装配，如果不能匹配，则再按照 Bean 类型进行装配；如果都无法匹配，则抛出 NoSuchBeanDefinitionException 异常。
        @Qualifier：与@Autowired注解配合使用，会将默认按照Bean类型装配修改为按照Bean的名称装配，Bean的实例名称由@Qualifier注解的参数指定
    自动装配：
        自动装配指Spring容器可以自动装配（autowire）相互协作的Bean之间的关联关系，将一个Bean注入其他Bean的Property中
        自动装配需要配置<bean>的autowire属性。（默认情况下不使用自动装配，必须通过ref元素定义）

7.Spring AOP(面向切面编程):
    目前最流行的 AOP 框架有两个，分别为 Spring AOP 和 AspectJ。
    Spring AOP 使用纯 Java 实现，不需要专门的编译过程和类加载器，在运行期间通过代理方式向目标类植入增强的代码。
    AspectJ 是一个基于 Java 语言的 AOP 框架，从 Spring 2.0 开始，Spring AOP 引入了对 AspectJ 的支持。AspectJ 扩展了 Java 语言，提供了一个专门的编译器，在编译时提供横向代码的植入。
    专业术语：
    Joinpoint（连接点）	指那些被拦截到的点，在 Spring 中，可以被动态代理拦截目标类的方法。
    Pointcut（切入点）	指要对哪些 Joinpoint 进行拦截，即被拦截的连接点。
    Advice（通知）	指拦截到 Joinpoint 之后要做的事情，即对切入点增强的内容。
    Target（目标）	指代理的目标对象。
    Weaving（植入）	指把增强代码应用到目标上，生成代理对象的过程。
    Proxy（代理）	指生成的代理对象。
    Aspect（切面）	切入点和通知的结合。

8.声明式AOP
    Spring 创建一个 AOP 代理的基本方法是使用 org.springframework.aop.framework.ProxyFactoryBean

9.AspectJ 开发AOP
    基于XML：
        通过Spring配置文件的方式定义切面、切入点、通知，全部在<aop:config>元素中
        spring-aspects-3.2.13.RELEASE.jar：Spring 为 AspectJ 提供的实现，在 Spring 的包中已经提供。
        com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar：是 AspectJ 提供的规范
    基于Annotation：
        尽管使用 XML 配置文件可以实现 AOP 开发，但是如果所有的相关的配置都集中在配置文件中，势必会导致 XML 配置文件过于臃肿，从而给维护和升级带来一定的困难
        AspectJ 允许使用注解定义切面、切入点和增强处理，而 Spring 框架则可以识别并根据这些注解生成 AOP 代理。

10.Spring JDBCTemplate
    Spring框架提供的JDBC的支持由四个包组成：core（核心包）、object、dataSource（数据源包）、support。
    org.springframework.jdbc.core.JdbcTemplate 类在核心包中。JdbcTemplate 类中包含了所有数据库操作的基本方法
    配置模板：jdbcTemplate.xml

11.Spring事务管理
    Spring 的事务管理是基于 AOP 实现的，而 AOP 是以方法为单位的。Spring 的事务属性分别为传播行为、隔离级别、只读和超时属性，这些属性提供了事务应用的方法和描述策略。
    在 Java EE 开发经常采用的分层模式中，Spring 的事务处理位于业务逻辑层，它提供了针对事务的解决方案。
    三个核心接口：
        PlatformTransactionManager：
            PlatformTransactionManager 接口是 Spring 提供的平台事务管理器，用于管理事务。
            该接口中提供了三个事务操作方法，具体如下。
                TransactionStatus getTransaction（TransactionDefinition definition）：用于获取事务状态信息。
                void commit（TransactionStatus status）：用于提交事务。
                void rollback（TransactionStatus status）：用于回滚事务。
            在项目中，Spring 将 xml 中配置的事务详细信息封装到对象 TransactionDefinition 中，然后通过事务管理器的 getTransaction() 方法获得事务的状态（TransactionStatus），并对事务进行下一步的操作
        TransactionDefinition：
            TransactionDefinition 接口是事务定义（描述）的对象，它提供了事务相关信息获取的方法，其中包括五个操作，具体如下
                String getName()：获取事务对象名称。
                int getIsolationLevel()：获取事务的隔离级别。
                int getPropagationBehavior()：获取事务的传播行为。
                int getTimeout()：获取事务的超时时间。
                boolean isReadOnly()：获取事务是否只读。
            事务传播行为：
                PROPAGATION_REQUIRED	required	支持当前事务。如果 A 方法已经在事务中，则 B 事务将直接使用。否则将创建新事务
                PROPAGATION_SUPPORTS	supports	支持当前事务。如果 A 方法已经在事务中，则 B 事务将直接使用。否则将以非事务状态执行
                PROPAGATION_MANDATORY	mandatory	支持当前事务。如果 A 方法没有事务，则抛出异常
                PROPAGATION_REQUIRES_NEW	requires_new	将创建新的事务，如果 A 方法已经在事务中，则将 A 事务挂起
                PROPAGATION_NOT_SUPPORTED	not_supported	不支持当前事务，总是以非事务状态执行。如果 A 方法已经在事务中，则将其挂起
                PROPAGATION_NEVER	    never	不支持当前事务，如果 A 方法在事务中，则抛出异常
                PROPAGATION.NESTED	    nested	嵌套事务，底层将使用 Savepoint 形成嵌套事务
            通常情况下，数据的查询不会改变原数据，所以不需要进行事务管理，而对于数据的增加、修改和删除等操作，必须进行事务管理。如果没有指定事务的传播行为，则 Spring3 默认的传播行为是 require
        TransactionStatus：
            TransactionStatus 接口是事务的状态，它描述了某一时间点上事务的状态信息。其中包含六个操作：
                void flush()	刷新事务
                boolean hasSavepoint()	获取是否存在保存点
                boolean isCompleted()	获取事务是否完成
                boolean isNewTransaction()	获取是否是新事务
                boolean isRollbackOnly()	获取是否回滚
                void setRollbackOnly()	设置事务回滚